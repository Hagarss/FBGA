
### Module: Block Memory Generator (BRAM)

### Description

This module stores the image data (cover and message images) in on-chip Block RAM (BRAM). Images are first converted to `.coe` files using MATLAB and then loaded into the FPGA using Xilinx IP cores. The image is read pixel by pixel, with each pixel being 24 bits (8 bits for each R, G, B channel).

* **Cover Image**: 256×256 RGB = 65536 pixels → needs 44 blocks of 36K BRAM.
* **Message Images**:

  * 32×32 RGB = 1024 pixels → needs 1 block.
  * 64×64 RGB = 4096 pixels → needs 3 blocks.

### Configuration

* Cover image address width: **16 bits**
* Message image address width: **10 bits** for 32×32, **12 bits** for 64×64
* Data width: **24 bits** (8R + 8G + 8B)

### Tools

* Use **MATLAB** to convert image to `.coe` file using this sample:

  ```matlab
  rgbImage = imread('image.png');
  r = rgbImage(:,:,1); g = rgbImage(:,:,2); b = rgbImage(:,:,3);
  rgb24 = bitshift(uint32(r), 16) + bitshift(uint32(g), 8) + uint32(b);
  rgb24 = reshape(rgb24', 1, []);
  fileID = fopen('image.coe','w');
  fprintf(fileID,'memory_initialization_radix=16;\n');
  fprintf(fileID,'memory_initialization_vector=\n');
  fprintf(fileID,'%06X,\n', rgb24(1:end-1));
  fprintf(fileID,'%06X;', rgb24(end));
  fclose(fileID);
  ```
* Instantiate a Xilinx **Block Memory Generator IP**.

  * Set **Data Width** to 24
  * Set **Depth** according to image size
  * Load `.coe` in initialization

---

##  Verilog Template (for instantiating BRAM IP)

You don’t need to write the entire BRAM logic manually since it’s generated by Xilinx. But here’s a **wrapper example** to instantiate it:

```verilog
// Wrapper for BRAM used to store a 256x256 RGB image
module bram_image_memory (
    input wire clk,
    input wire [15:0] addr,     // 16-bit address for 256x256 image
    output wire [23:0] pixel_out
);

    // Instantiate BRAM (generated via IP core with .coe)
    blk_mem_gen_0 bram_inst (
        .clka(clk),
        .addra(addr),
        .douta(pixel_out)
    );

endmodule
```

> Replace `blk_mem_gen_0` with the actual name of the BRAM IP core generated in Vivado.

---
