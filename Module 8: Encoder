### Module 8: Encoder

**Description:**
This module embeds the secret message bits into the cover image based on the number of bits to embed (1, 2, or 3 bits). It starts embedding 2 clock cycles after the edge detected flag is triggered, ensuring that message bits are only embedded in edge pixels. The encoder uses a switch-case structure to handle different bit embedding modes and modifies the least significant bits of the cover image pixels accordingly.

---

### Verilog Code: Encoder Module

```verilog
module encoder (
    input wire clk,
    input wire rst,
    input wire start_encode,           // Starts encoding process (2 clock cycles after edge detected flag)
    input wire [1:0] bits_to_embed,    // Number of bits to embed: 1, 2, or 3
    input wire [23:0] cover_pixel_in,  // Input pixel from cover image (8 bits per channel RGB)
    input wire [7:0] message_bits,     // Bits of message to embed (up to 8 bits, use only required bits)
    output reg [23:0] stego_pixel_out, // Output pixel after embedding
    output reg done                    // Signal that embedding for current pixel is done
);

    reg [23:0] pixel_temp;
    reg [1:0] embed_mode;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            stego_pixel_out <= 24'd0;
            done <= 0;
            embed_mode <= 2'b00;
        end else if (start_encode) begin
            embed_mode <= bits_to_embed;
            done <= 0;
            case (embed_mode)
                2'b01: begin
                    // Embed 1 bit per color channel (3 bits total)
                    pixel_temp[23:21] <= cover_pixel_in[23:21];                    // Keep upper bits
                    pixel_temp[20]    <= message_bits[2];                          // Embed bit 1 in R LSB
                    pixel_temp[19:17] <= cover_pixel_in[19:17];
                    pixel_temp[16]    <= message_bits[1];                          // Embed bit 2 in G LSB
                    pixel_temp[15:8]  <= cover_pixel_in[15:8];
                    pixel_temp[7]     <= message_bits[0];                          // Embed bit 3 in B LSB
                    pixel_temp[6:0]   <= cover_pixel_in[6:0];
                    stego_pixel_out <= pixel_temp;
                    done <= 1;
                end

                2'b10: begin
                    // Embed 2 bits per channel (6 bits total)
                    pixel_temp[23:22] <= cover_pixel_in[23:22];                    // Keep upper bits
                    pixel_temp[21:20] <= message_bits[5:4];                        // Embed bits 1 & 2 in R LSBs
                    pixel_temp[19:18] <= cover_pixel_in[19:18];
                    pixel_temp[17:16] <= message_bits[3:2];                        // Embed bits 3 & 4 in G LSBs
                    pixel_temp[15:14] <= cover_pixel_in[15:14];
                    pixel_temp[13:12] <= message_bits[1:0];                        // Embed bits 5 & 6 in B LSBs
                    pixel_temp[11:0]  <= cover_pixel_in[11:0];
                    stego_pixel_out <= pixel_temp;
                    done <= 1;
                end

                2'b11: begin
                    // Embed 3 bits per channel (9 bits total)
                    pixel_temp[23:21] <= message_bits[8:6];                        // Embed bits 1-3 in R LSBs
                    pixel_temp[20:18] <= message_bits[5:3];                        // Embed bits 4-6 in G LSBs
                    pixel_temp[17:15] <= message_bits[2:0];                        // Embed bits 7-9 in B LSBs
                    stego_pixel_out <= pixel_temp;
                    done <= 1;
                end

                default: begin
                    stego_pixel_out <= cover_pixel_in;  // No embedding, pass through
                    done <= 1;
                end
            endcase
        end else begin
            done <= 0;
        end
    end
endmodule
```

---

### Notes:

* The encoding changes the least significant bits of the RGB channels of the cover image pixel according to the bits to embed.
* `message_bits` input width can be adjusted based on max bits embedded per pixel. Here, max assumed is 9 bits (3 bits per RGB).
* The `done` signal indicates when embedding for that pixel is finished.
* Adjust bit indexing based on actual bit ordering in your image data.

